import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.9'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.sonarqube' version '4.0.0.2929'
	id 'jacoco'
}

group = 'br.com.rafaellbarros'
version = '1.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "order-api"
		property "sonar.organization", "rbs-digitalsolutions"
		property "sonar.host.url", "http://sonar:9000"
		property "sonar.token", project.findProperty("sonar.token") ?: System.getenv("SONAR_TOKEN")

		// Diretórios de código fonte e testes
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"

		// Cobertura de código (JaCoCo)
		property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"

		// Incluir arquivos de teste no Sonar
		property "sonar.junit.reportPaths", "${project.buildDir}/test-results/test"
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

repositories {
	mavenCentral()
}

ext {
	jacksonVersion = "2.17.2"
	mapStructVersion = "1.6.2"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus:1.14.4'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.data:spring-data-redis'
	implementation 'io.lettuce:lettuce-core:6.5.3.RELEASE'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
	implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
	implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
	implementation "org.mapstruct:mapstruct:${mapStructVersion}"

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

processResources {
	filesMatching(["application*.yml", "application*.yaml"]) {
		filter(ReplaceTokens, tokens: [
				"project.version": version
		], beginToken: '@', endToken: '@')
	}
}

jacoco {
	toolVersion = "0.8.11" // Use sempre a versão mais recente do JaCoCo
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // Garante que o relatório seja gerado após os testes
}

tasks.named('jacocoTestReport') {
	dependsOn 'test' // Garante que os testes sejam executados antes de gerar o relatório
	reports {
		xml.required = true  // Necessário para o SonarQube
		html.required = false
		csv.required = false
	}
}

bootJar {
	archiveBaseName.set('order-api')
	archiveVersion.set('')
}
