import jenkins.model.*
import hudson.model.*
import hudson.plugins.sonar.*
import hudson.util.Secret
import com.cloudbees.plugins.credentials.impl.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*
import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
import java.nio.file.Files
import java.nio.file.Paths

// Obt√©m a inst√¢ncia do Jenkins
def instance = Jenkins.getInstance()

// üìå Caminho dos arquivos que cont√™m o token e a URL
def tokenFilePath = "/var/jenkins_home/sonarqube-token.txt"
def hostUrlFilePath = "/var/jenkins_home/sonarqube-host-url.txt"

// L√™ o conte√∫do do arquivo para obter o token do SonarQube
def SONAR_TOKEN = ""
def tokenFile = new File(tokenFilePath)
if (tokenFile.exists()) {
    SONAR_TOKEN = tokenFile.text.trim()  // L√™ e remove espa√ßos extras no in√≠cio e fim
} else {
    println "‚ùå O arquivo '${tokenFilePath}' n√£o foi encontrado! N√£o foi poss√≠vel configurar o SonarQube."
    return  // Interrompe o script caso o arquivo n√£o exista
}

// L√™ o conte√∫do do arquivo para obter a URL do SonarQube
def SONAR_HOST_URL = ""
def hostUrlFile = new File(hostUrlFilePath)
if (hostUrlFile.exists()) {
    SONAR_HOST_URL = hostUrlFile.text.trim()  // L√™ e remove espa√ßos extras no in√≠cio e fim
} else {
    println "‚ùå O arquivo '${hostUrlFilePath}' n√£o foi encontrado! N√£o foi poss√≠vel configurar o SonarQube."
    return  // Interrompe o script caso o arquivo n√£o exista
}

// üõ†Ô∏è Criar credenciais do SonarQube (TOKEN)
def tokenCredentials = new StringCredentialsImpl(
    CredentialsScope.GLOBAL, 
    "SONAR_TOKEN",  // ID das credenciais
    null,  // Descri√ß√£o opcional
    Secret.fromString("${SONAR_TOKEN}")
)

// üõ†Ô∏è Criar credenciais do SonarQube (HOST_URL)
def urlCredentials = new StringCredentialsImpl(
    CredentialsScope.GLOBAL, 
    "SONAR_HOST_URL",  // ID das credenciais
    null,  // Descri√ß√£o opcional
    Secret.fromString("${SONAR_HOST_URL}")
)

SystemCredentialsProvider systemCredentialsProvider = SystemCredentialsProvider.getInstance()
systemCredentialsProvider.getStore().addCredentials(Domain.global(), tokenCredentials)
systemCredentialsProvider.getStore().addCredentials(Domain.global(), urlCredentials)
systemCredentialsProvider.save()

// üîß Configurar a instala√ß√£o do SonarQube no Jenkins
SonarInstallation sonarInstallation = new SonarInstallation(
    "sonar",                      // Nome da instala√ß√£o
    "${SONAR_HOST_URL}",           // URL do SonarQube
    "SONAR_TOKEN",                 // ID das credenciais (criado acima)
    null, null, null, null, null, null  // Outros par√¢metros podem ser nulos ou configurados conforme necess√°rio
)

// Obter a configura√ß√£o global do SonarQube
SonarGlobalConfiguration sonarGlobalConfiguration = instance.getDescriptor(SonarGlobalConfiguration.class)
sonarGlobalConfiguration.setInstallations(sonarInstallation)
sonarGlobalConfiguration.migrateCredentials()
sonarGlobalConfiguration.save()

// Salvar as configura√ß√µes do Jenkins
instance.save()

println "‚úÖ Configura√ß√£o do SonarQube conclu√≠da com sucesso!"
