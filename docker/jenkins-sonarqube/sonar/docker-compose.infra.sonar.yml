services:

  db-sonar:
    image: postgres:13
    container_name: db-sonar
    environment:
      - POSTGRES_USER=${SONAR_DB_USER}
      - POSTGRES_PASSWORD=${SONAR_DB_PASSWORD}
      - POSTGRES_DB=${SONAR_DB_NAME}
    networks:
      - app_network
    volumes:
      - db_sonar_data:/var/lib/postgresql/data

  sonar:
    image: sonarqube:community
    container_name: sonar
    env_file:
      - ${ENV_FILE}
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://${SONAR_DB_HOST}:${SONAR_DB_PORT}/${DB_NAME}
      - SONARQUBE_JDBC_USERNAME=${DB_USER}
      - SONARQUBE_JDBC_PASSWORD=${DB_PASSWORD}
      - SONAR_ADMIN_PASSWORD=${SONAR_ADMIN_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
    ports:
      - "9000:9000"
    depends_on:
      - db-sonar
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app_network
    volumes:
      - sonar_data:/opt/sonarqube/data
      - sonar_extensions:/opt/sonarqube/extensions
      - sonar_logs:/opt/sonarqube/logs

  sonar-init:
    build:
      context: .
      dockerfile: Dockerfile.sonar-init
    container_name: sonar-init
    env_file:
      - ${ENV_FILE}
    environment:
      - SONAR_ADMIN_PASSWORD=${SONAR_ADMIN_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
    networks:
      - app_network
    depends_on:
      sonar:
        condition: service_healthy
    volumes:
      - ${ENV_FILE}:/env/${ENV_FILE}

volumes:
  db_sonar_data:
  sonar_data:
  sonar_logs:
  sonar_extensions:

networks:
  app_network:
    driver: bridge
